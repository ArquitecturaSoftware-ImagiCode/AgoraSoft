name: Test Docker Compose (Develop)

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services with Docker Compose
        run: |
          cd docker
          docker compose -f docker-compose.dev.yml up -d --build

      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Esperando que los servicios est√©n listos (esto puede tomar ~8 minutos)..."
          
          cd docker
          for i in {1..48}; do
            echo "Esperando... $((i * 10)) segundos transcurridos"
            sleep 10
          
            RUNNING=$(docker compose -f docker-compose.dev.yml ps -q | wc -l)
            if [ $RUNNING -eq 4 ]; then
              HEALTHY=$(docker compose -f docker-compose.dev.yml ps | grep -E "agorasoft-(database|backend|frontend|proxy)" | grep -c "Up")
              if [ $HEALTHY -eq 4 ]; then
                echo "‚úÖ Todos los servicios est√°n listos despu√©s de $((i * 10)) segundos"
                break
              fi
            fi
          done

      - name: Check running containers
        run: |
          echo "üìã Estado de los contenedores:"
          cd docker
          docker compose -f docker-compose.dev.yml ps
          echo ""
          echo "üìù Logs de los servicios:"
          docker compose -f docker-compose.dev.yml logs --tail=50

      - name: Verify specific services are running
        run: |
          echo "üîç Verificando servicios espec√≠ficos..."
          
          if docker ps --filter "name=agorasoft-database" --filter "status=running" | grep -q agorasoft-database; then
            echo "‚úÖ agorasoft-database est√° corriendo"
          else
            echo "‚ùå agorasoft-database NO est√° corriendo"
            docker logs agorasoft-database
            exit 1
          fi
          
          if docker ps --filter "name=agorasoft-backend" --filter "status=running" | grep -q agorasoft-backend; then
            echo "‚úÖ agorasoft-backend est√° corriendo"
          else
            echo "‚ùå agorasoft-backend NO est√° corriendo"
            docker logs agorasoft-backend
            exit 1
          fi
          
          if docker ps --filter "name=agorasoft-frontend" --filter "status=running" | grep -q agorasoft-frontend; then
            echo "‚úÖ agorasoft-frontend est√° corriendo"
          else
            echo "‚ùå agorasoft-frontend NO est√° corriendo"
            docker logs agorasoft-frontend
            exit 1
          fi
          
          if docker ps --filter "name=agorasoft-proxy" --filter "status=running" | grep -q agorasoft-proxy; then
            echo "‚úÖ agorasoft-proxy est√° corriendo"
          else
            echo "‚ùå agorasoft-proxy NO est√° corriendo"
            docker logs agorasoft-proxy
            exit 1
          fi
          
          echo ""
          echo "üéâ Todos los servicios (database, backend, frontend, proxy) est√°n corriendo correctamente"

      - name: Verify database health
        run: |
          echo "üè• Verificando salud de la base de datos..."
          docker exec agorasoft-database pg_isready -U postgres -d AgoraSoft
          
          echo ""
          echo "üìä Verificando que el schema inventario existe..."
          docker exec agorasoft-database psql -U postgres -d AgoraSoft -c "\dn inventario"
          
          echo ""
          echo "üìã Verificando que la tabla usuario existe..."
          docker exec agorasoft-database psql -U postgres -d AgoraSoft -c "\dt inventario.usuario"

      - name: Login to GitHub Container Registry
        if: github.event_name == 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Get latest version and increment
        if: github.event_name == 'pull_request'
        id: version
        run: |
          echo "üîç Buscando √∫ltima versi√≥n en GHCR..."
          
          LAST_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
            "https://api.github.com/orgs/arquitecturasoftware-imagicode/packages/container/agorasoft-backend/versions" \
            | jq -r '.[0].metadata.container.tags[] | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))' \
            | sort -V | tail -n1)
          
          if [ -z "$LAST_VERSION" ]; then
            echo "‚ö†Ô∏è  No se encontr√≥ versi√≥n previa, comenzando en 1.0.0"
            NEW_VERSION="1.0.0"
          else
            echo "üìå √öltima versi√≥n encontrada: $LAST_VERSION"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "üÜï Nueva versi√≥n: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: List Docker images (debug)
        if: github.event_name == 'pull_request'
        run: |
          echo "üîç Listando todas las im√°genes Docker disponibles:"
          docker images
          echo ""
          echo "üîç Buscando im√°genes de backend:"
          docker images | grep -i backend || echo "No se encontraron im√°genes de backend"
          echo ""
          echo "üîç Buscando im√°genes de frontend:"
          docker images | grep -i frontend || echo "No se encontraron im√°genes de frontend"

      - name: Tag and push images to GHCR
        if: github.event_name == 'pull_request'
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "üè∑Ô∏è  Etiquetando im√°genes con versi√≥n: $VERSION"
          
          # Buscar las im√°genes construidas (b√∫squeda m√°s flexible)
          BACKEND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -i backend | grep -v ghcr.io | head -n1)
          FRONTEND_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -i frontend | grep -v ghcr.io | head -n1)
          
          if [ -z "$BACKEND_IMAGE" ]; then
            echo "‚ùå No se encontr√≥ imagen de backend"
            exit 1
          fi
          
          if [ -z "$FRONTEND_IMAGE" ]; then
            echo "‚ùå No se encontr√≥ imagen de frontend"
            exit 1
          fi
          
          echo "‚úÖ Backend image encontrada: $BACKEND_IMAGE"
          echo "‚úÖ Frontend image encontrada: $FRONTEND_IMAGE"
          
          # Tag backend
          docker tag $BACKEND_IMAGE ghcr.io/arquitecturasoftware-imagicode/agorasoft-backend:$VERSION
          docker tag $BACKEND_IMAGE ghcr.io/arquitecturasoftware-imagicode/agorasoft-backend:latest
          
          # Tag frontend
          docker tag $FRONTEND_IMAGE ghcr.io/arquitecturasoftware-imagicode/agorasoft-frontend:$VERSION
          docker tag $FRONTEND_IMAGE ghcr.io/arquitecturasoftware-imagicode/agorasoft-frontend:latest
          
          echo "üì§ Subiendo im√°genes a GHCR..."
          
          # Push backend
          docker push ghcr.io/arquitecturasoftware-imagicode/agorasoft-backend:$VERSION
          docker push ghcr.io/arquitecturasoftware-imagicode/agorasoft-backend:latest
          
          # Push frontend
          docker push ghcr.io/arquitecturasoftware-imagicode/agorasoft-frontend:$VERSION
          docker push ghcr.io/arquitecturasoftware-imagicode/agorasoft-frontend:latest
          
          echo "‚úÖ Im√°genes subidas exitosamente:"
          echo "   - ghcr.io/arquitecturasoftware-imagicode/agorasoft-backend:$VERSION"
          echo "   - ghcr.io/arquitecturasoftware-imagicode/agorasoft-backend:latest"
          echo "   - ghcr.io/arquitecturasoftware-imagicode/agorasoft-frontend:$VERSION"
          echo "   - ghcr.io/arquitecturasoftware-imagicode/agorasoft-frontend:latest"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "‚ùå El workflow fall√≥. Mostrando logs completos:"
          cd docker
          docker compose -f docker-compose.dev.yml logs

      - name: Stop and remove containers
        if: always()
        run: |
          echo "üßπ Limpiando contenedores..."
          cd docker
          docker compose -f docker-compose.dev.yml down -v